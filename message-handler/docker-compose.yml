version: '3'

services:
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    hostname: zookeeper
    restart: always
    ports:
      - "2181:2181"
    volumes:
      - ./zookeeper/data:/data
    networks:
      - sigreen

  kafka:
    image: wurstmeister/kafka
    container_name: kafka
    hostname: kafka
    ports:
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_LISTENERS: SSL://kafka:9093
      KAFKA_ADVERTISED_LISTENERS: SSL://kafka:9093
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_SSL_KEYSTORE_LOCATION: /etc/kafka/secrets/kafka.server.keystore.jks
      KAFKA_SSL_KEYSTORE_PASSWORD: 123456
      KAFKA_SSL_KEY_PASSWORD: 123456
      KAFKA_SSL_TRUSTSTORE_LOCATION: /etc/kafka/secrets/kafka.server.truststore.jks
      KAFKA_SSL_TRUSTSTORE_PASSWORD: 123456
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:
      KAFKA_SECURITY_PROTOCOL: SSL
      KAFKA_SECURITY_INTER_BROKER_PROTOCOL: SSL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ALLOW_EVERYONE_IF_NO_ACL_FOUND: "false"
      KAFKA_AUTHORIZER_CLASS_NAME: kafka.security.auth.SimpleAclAuthorizer
      KAFKA_SUPER_USERS: User:CN=kafka
    depends_on:
      - zookeeper
    volumes:
      - ./ssl:/etc/kafka/secrets/
      - ./kafka/data:/kafka
    networks:
      - sigreen

  message-handler:
    build: .
    container_name: message-handler
    hostname: message-handler
    restart: always
    image: message-handler:1.0.0
    ports:
      - "8887:8887"
    depends_on:
      - kafka
    links:
      - kafka
    tty: true
    volumes:
      - ./ssl:/certs/
    networks:
      - sigreen

  iconnector:
    build: ./../iconnector/
    container_name: iconnector
    hostname: iconnector
    restart: always
    image: iconnector:1.0.0
    ports:
      - "8888:8888"
    depends_on:
      - kafka
    links:
      - kafka
    tty: true
    volumes:
      - ./ssl:/certs/
    networks:
      - sigreen

  postgres:
    image: postgres:latest
    container_name: postgres
    hostname: postgres
    restart: always
    environment:
      POSTGRES_USER: sigreen
      POSTGRES_PASSWORD: 123456
    ports:
      - "5432:5432"
    networks:
      - sigreen

  configuration-service:
    build: ./../configuration-service/
    container_name: configuration-service
    hostname: configuration-service
    restart: always
    image: configuration-service:1.0.0
    ports:
      - "8886:8886"
    depends_on:
      - postgres
    links:
      - postgres
    tty: true
    networks:
      - sigreen

networks:
  sigreen:
    driver: bridge